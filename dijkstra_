import heapq


def dijkstra(adj_matrix, start):
    num_nodes = len(adj_matrix)

    # Initialize distance array with infinity for all nodes except the start node
    distances = [float('inf')] * num_nodes
    distances[start] = 0

    # Priority queue to keep track of nodes to visit
    priority_queue = [(0, start)]

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        # Skip if we've already found a shorter path to the current node
        if current_distance > distances[current_node]:
            continue

        for neighbor in range(num_nodes):
            weight = adj_matrix[current_node][neighbor]

            # Skip if there's no edge between nodes or if the node is already visited
            if weight == 0 or neighbor == current_node:
                continue

            distance = current_distance + weight

            # If the new distance is shorter, update the distance and enqueue the neighbor
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances


# Example adjacency matrix representation of the graph
# Replace the values with your own graph's weights (0 for no edge)
adj_matrix = [
    [0, 1, 4, 0],
    [1, 0, 2, 5],
    [4, 2, 0, 1],
    [0, 5, 1, 0]
]

start_node = 0  # Start node index
shortest_distances = dijkstra(adj_matrix, start_node)
print("Shortest distances from node", start_node, ":")
print(shortest_distances)