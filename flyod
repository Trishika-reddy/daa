def floyd_warshall(graph):
    # Initialize the distance matrix with direct edge weights
    distances = graph.copy()
    num_vertices = len(graph)

    # Update distances through intermediate vertices
    for k in range(num_vertices):
        for i in range(num_vertices):
            for j in range(num_vertices):
                if distances[i][k] + distances[k][j] < distances[i][j]:
                    distances[i][j] = distances[i][k] + distances[k][j]

    return distances

# Example usage
inf = float('inf')
graph = [
    [0, 3, inf, 7],
    [8, 0, 2, inf],
    [5, inf, 0, 1],
    [2, inf, inf, 0]
]

all_shortest_paths = floyd_warshall(graph)
for row in all_shortest_paths:
    print(row)
